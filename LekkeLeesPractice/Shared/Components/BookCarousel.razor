@inject IJSRuntime jsRuntime

@if (Books is not null && Books.Count > 0)
{
    <div id="bookCarousel" class="carousel slide" data-bs-ride="carousel" style="width: 400px;">
        @*<ol class="carousel-indicators">
            @for (int i = 0; i < Books.Count; i++)
            {
                <li data-bs-target="#bookCarousel" data-slide-to="@i" class="@((i == 0) ? "active" : "")"></li>
            }
        </ol>*@
        <div class="carousel-inner px-4">
            @for (int i = 0; i < Books.Count; i++)
            {
                <div class="carousel-item @(i == 0 ? "active" : "")">

                    <img src="@Books[i].FrontPageImagePath" class="" style="max-width:200px;object-fit:contain;" />

@*                    <div class="mt-3">
                        <h3>@Books[i].Title</h3>
                    </div>*@

@*                    <div class="">
                        <p>Description of the book goes here... This is currently the same for all books.</p>
                        <p>If more text is added, it looks like this...</p>
                        <p>and then below like this...</p>
                    </div>*@

                </div>
            }
        </div>

        <a id="bookCarouselIndicatorsPrev" class="carousel-control-prev" role="button" data-bs-slide="prev">
            <span class="oi oi-chevron-left" style="color:darkgreen;" aria-hidden="true"></span>
        </a>
        <a id="bookCarouselIndicatorsNext" class="carousel-control-next" role="button" data-bs-slide="next">
            <span class="oi oi-chevron-right" style="color:darkgreen;" aria-hidden="true"></span>
        </a>
        
    </div>
}
else
{
    <h1>... Loading books ...</h1>
}

@code {
    [Parameter]
    public List<BookViewModel> Books { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeAsync<object>("initializeCarousel");
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
    }
}